AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates Lambda function for terminating EC2 instances in the "stopped" state for more than 30 days
  and for notifying in 7, 2, 1 days before termination via email with a warning message.

Resources:
  # Scheduled rule for triggering ec2_termination_lambda_function every day at 10:00am
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "EC2TerminationScheduledRule"
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 10 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: "TargetFunctionV1"

  # Invoke permission for scheduled rule
  PermissionForScheduledRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduledRule
          - Arn

  # SNS topic for sending warning emails
  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "EC2TerminationTopic"
      DisplayName: "EC2TerminationTopic"

  # Subscription example
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: byusupov@provectus.com
      Protocol: email
      TopicArn: !Ref 'EmailSNSTopic'

  # IAM role for ec2_termination_lambda_function function
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ec2_termination_lambda_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sns:Publish
                Resource: !Ref EmailSNSTopic
                Effect: Allow
              - Action:
                  - ec2:DescribeInstances
                  - ec2:CreateTags
                  - ec2:DeleteTags
                Resource: '*'
                Effect: Allow
              - Action:
                  - ec2:TerminateInstances
                Resource: '*'
                Effect: Allow
                # TODO: remove or modify condition
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/Owner': byusupov

  # CloudWatch log group for ec2_termination_lambda_function function
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaFunction]]
      RetentionInDays: 14

  # Lambda function for scheduled EC2 instances termination
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ec2_termination_lambda_function
      Runtime: python3.8
      Timeout: 10
      Handler: ec2_termination.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref 'EmailSNSTopic'
          DAYS_DELTA: 30
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            return
AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates Lambda function for terminating EC2 instances in the "stopped" state for more than 30 days
  and for notifying in 7, 2, 1 days before termination via email with a warning message.

Resources:
  # Scheduled rule for triggering ec2_termination_lambda_function every day at 10:00am
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "EC2TerminationScheduledRule"
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 10 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: "TargetFunctionV1"

  # Invoke permission for scheduled rule
  PermissionForScheduledRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduledRule
          - Arn

  # SNS topic for sending warning emails
  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "EC2TerminationTopic"
      DisplayName: "EC2TerminationTopic"

  # Subscription example
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: byusupov@provectus.com
      Protocol: email
      TopicArn: !Ref 'EmailSNSTopic'

  # IAM role for ec2_termination_lambda_function function
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ec2_termination_lambda_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sns:Publish
                Resource: !Ref EmailSNSTopic
                Effect: Allow
              - Action:
                  - ec2:DescribeInstances
                  - ec2:CreateTags
                  - ec2:DeleteTags
                Resource: '*'
                Effect: Allow
              - Action:
                  - ec2:TerminateInstances
                Resource: '*'
                Effect: Allow
                # TODO: remove or modify condition
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/Owner': byusupov

  # CloudWatch log group for ec2_termination_lambda_function function
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaFunction]]
      RetentionInDays: 14

  # Lambda function for scheduled EC2 instances termination
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ec2_termination_lambda_function
      Runtime: python3.8
      Timeout: 10
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref 'EmailSNSTopic'
          DAYS_DELTA: 30
      Code:
        ZipFile: |
          import boto3
          import os
          import re
          from datetime import date, datetime, timedelta

          def lambda_handler(event, context):
            current_date = date.today()
            days_delta   = int(os.environ.get('DAYS_DELTA'))
            ec2          = boto3.client('ec2')
            response     = ec2.describe_instances()
            reservations = response['Reservations']
            for reservation in reservations:
              instances = reservation['Instances']
              for instance in instances:
                instance_id          = instance['InstanceId']
                instance_state       = instance['State']['Name']
                termination_date_tag = None

                for tag in instance['Tags']:
                  if tag['Key'] == "TerminationDate":
                    termination_date_tag = datetime.strptime(tag['Value'], '%Y-%m-%d').date()

                if instance_state == "stopped" or termination_date_tag:
                  print("InstanceID: " + instance_id)
                  print("Instance state: " + instance_state)
                  if instance_state == "stopped":
                    stopped_reason   = instance['StateTransitionReason']
                    stopped_date_re  = re.findall("([0-9]{4}\-[0-9]{2}\-[0-9]{2})", stopped_reason)[0]
                    stopped_date     = datetime.strptime(stopped_date_re, '%Y-%m-%d').date()
                    termination_attr = stopped_date + timedelta(days=days_delta)
                    if not termination_date_tag or termination_attr >= termination_date_tag:
                      termination_date = current_date + timedelta(days=days_delta)
                      ec2.create_tags(
                        Resources=[
                          instance_id
                        ],
                        Tags=[
                          {
                            'Key': 'TerminationDate',
                            'Value': termination_date.isoformat()
                          }
                        ]
                      )
                    else:
                      termination_date = termination_date_tag
                    print("Instance " + instance_id + " will be terminated on " + termination_date.isoformat())

                    if current_date == termination_date - timedelta(days=1):
                      send_warn_email(1, termination_date, instance_id)
                    elif current_date == termination_date - timedelta(days=2):
                      send_warn_email(2, termination_date, instance_id)
                    elif current_date == termination_date - timedelta(days=7):
                      send_warn_email(7, termination_date, instance_id)
                    elif current_date >= termination_date:
                      ec2.terminate_instances(
                        InstanceIds=[
                          instance_id
                        ]
                      )
                      print("Instance " + instance_id + " is terminated")
                  elif termination_date_tag:
                    ec2.delete_tags(
                      Resources=[
                        instance_id
                      ],
                      Tags=[
                        {
                          'Key': 'TerminationDate'
                        }
                      ]
                    )
                    print("TerminationDate tag was removed for instance " + instance_id)
                  print("\n")

          def send_warn_email(days_left, termination_date, instance_id):
            sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
            sns_client    = boto3.client('sns')
            sns_client.publish(
                TopicArn = sns_topic_arn,
                Subject  = "WARNING!!! Intance " + instance_id + " will be termnated after " + str(days_left) + " day(s)",
                Message  = "Intance " + instance_id + " will be termnated after " + str(days_left) + " day(s)\n" +
                           "Termination date: " + termination_date.isoformat()
            )
            print("Warning message for instance " + instance_id + " is sent")
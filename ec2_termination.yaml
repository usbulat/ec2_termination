AWSTemplateFormatVersion: 2010-09-09
Description: >
  This CloudFormation template creates Lambda function for terminating EC2 instances in the "stopped" state for more than 30 days
  and for notifying in 7, 2, 1 days before termination via email with a warning message.
  It also creates Lambda function for restarting the termination counter manually.

Resources:
  # Scheduled rule for triggering ec2_termination_lambda_function every day at 10:00am
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "EC2TerminationScheduledRule"
      Description: "ScheduledRule"
#      ScheduleExpression: "cron(0 10 * * ? *)"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: "TargetFunctionV1"

  # Event rule for triggering ec2_termination_lambda_function on state change of EC2 instances
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "EC2TerminationEventRule"
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EC2 Instance State-change Notification"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: "TargetFunctionV1"


  # Invoke permission for scheduled rule
  PermissionForScheduledRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduledRule
          - Arn

  # Invoke permission for event rule
  PermissionForEventRuleToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventRule
          - Arn

  # SNS topic for sending warning emails
  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "EC2TerminationTopic"
      DisplayName: "EC2TerminationTopic"

  # Subscription example
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: byusupov@provectus.com
      Protocol: email
      TopicArn: !Ref 'EmailSNSTopic'

  # IAM role for ec2_termination_lambda_function function
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ec2_termination_lambda_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sns:Publish
                Resource: !Ref EmailSNSTopic
                Effect: Allow
              - Action:
                  - ec2:DescribeInstances
                  - ec2:CreateTags
                  - ec2:DeleteTags
                Resource: '*'
                Effect: Allow
              - Action:
                  - ec2:TerminateInstances
                Resource: '*'
                Effect: Allow
                # TODO: remove or modify condition
                Condition:
                  StringEquals:
                    'ec2:ResourceTag/Owner': byusupov

  # CloudWatch log group for ec2_termination_lambda_function function
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref LambdaFunction]]
      RetentionInDays: 14

  # Lambda function for scheduled EC2 instances termination
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ec2_termination_lambda_function
      Runtime: python3.8
      Timeout: 10
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaFunctionRole
          - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref 'EmailSNSTopic'
          DAYS_DELTA: 30
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import date, datetime, timedelta

          current_date = date.today()

          def lambda_handler(event, context):
            event_type   = event['detail-type']
            days_delta   = int(os.environ.get('DAYS_DELTA'))

            print("Current date: " + current_date.isoformat())
            print("Event type:" + event_type)

            if event_type == 'EC2 Instance State-change Notification':
              ec2            = boto3.client("ec2")
              instance_state = event['detail']['state']
              instance_id    = event['detail']['instance-id']
              print("InstanceID: " + instance_id)
              print("Instance state:" + instance_state)
              if instance_state == 'stopped':
                termination_date = current_date + timedelta(days=days_delta)
                ec2.create_tags(
                  Resources=[
                    instance_id
                  ],
                  Tags=[
                    {
                      'Key': 'TerminationDate',
                      'Value': termination_date.isoformat()
                    }
                  ]
                )
                print("WARNING: instance " + instance_id + " will be terminated on " + termination_date.isoformat())
              else:
                ec2.delete_tags(
                  Resources=[
                    instance_id
                  ],
                  Tags=[
                    {
                      'Key': 'TerminationDate'
                    }
                  ]
                )
                print("TerminationDate tag was removed for instance " + instance_id)
            elif event_type == 'Scheduled Event':
              ec2           = boto3.resource("ec2")
              sns_client    = boto3.client('sns')
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')

              notify_1 = get_notification_list(1, ec2)
              notify_2 = get_notification_list(2, ec2)
              notify_7 = get_notification_list(7, ec2)

              if notify_1:
                send_warn_email(1, notify_1, sns_client, sns_topic_arn)
              if notify_2:
                send_warn_email(2, notify_2, sns_client, sns_topic_arn)
              if notify_7:
                send_warn_email(7, notify_7, sns_client, sns_topic_arn)

          def get_notification_list(days_left, ec2):
            termination_date = current_date + timedelta(days=days_left)
              notify = ec2.instances.filter(Filters=[
                                               {
                                                 'Name': 'instance-state-name',
                                                 'Values': ['stopped']
                                               },
                                               {
                                                 'Name': 'tag:TerminationDate',
                                                 'Values': [termination_date.isoformat()]
                                               }
                                             ]
                                           )
              if notify.count.zero?
                print("No instances will be terminated after " + str(days_left) + " day(s)")
              else
                print("Instances to be terminated after " + str(days_left) + " day(s):")
                for instance in notify:
                  print("- " + instance.id)
                  sns_notify = sns_notify + instance.id + "\n"
            return sns_notify

          def send_warn_email(days_left, instances_list, sns_client, sns_topic_arn):
            sns_client.publish(
                TopicArn = sns_topic_arn,
                Subject = "WARNING!!! Intances to termnate after " + str(days_left) + " day(s)",
                Message = "Intances to be terminated after " + str(days_left) + " day(s):\n" + instances_list
            )
            print('Warning message for " + str(days_left) + " day(s) is sent!')